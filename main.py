import os
import json
import datetime
from flask import Flask, request
import requests
from zoneinfo import ZoneInfo
from threading import Thread
import time

TOKEN = os.environ.get('BOT_TOKEN')
BASE_URL = f'https://api.telegram.org/bot{TOKEN}'
SCHEDULE_FILE = 'schedule.json'

app = Flask(__name__)

def send_message(chat_id, text):
    url = f'{BASE_URL}/sendMessage'
    payload = {'chat_id': chat_id, 'text': text}
    requests.post(url, json=payload)

def load_schedule(chat_id):
    try:
        with open(SCHEDULE_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            if str(chat_id) not in data:
                data[str(chat_id)] = []
            for d in data[str(chat_id)]:
                if 'notified' not in d:
                    d['notified'] = False
            return data[str(chat_id)]
    except:
        save_schedule(chat_id, [])
        return []

def save_schedule(chat_id, lst):
    try:
        with open(SCHEDULE_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except:
        data = {}
    data[str(chat_id)] = lst
    with open(SCHEDULE_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False)

def add_schedule(chat_id, time_str, message):
    lst = load_schedule(chat_id)
    lst.append({'time': time_str, 'message': message, 'notified': False})
    save_schedule(chat_id, lst)

def check_and_notify():
    while True:
        now = datetime.datetime.now(ZoneInfo("Asia/Bangkok")).strftime('%H:%M')
        try:
            with open(SCHEDULE_FILE, 'r', encoding='utf-8') as f:
                all_data = json.load(f)
        except:
            all_data = {}

        updated = False
        for chat_id, events in all_data.items():
            for event in events:
                event_time = event['time'].split(' ')[1]
                if event_time == now and not event.get('notified', False):
                    send_message(chat_id, f"[ ü§ñ ] 9CharnBot \nüîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: {event['message']}")
                    event['notified'] = True
                    updated = True
            all_data[chat_id] = events

        if updated:
            with open(SCHEDULE_FILE, 'w', encoding='utf-8') as f:
                json.dump(all_data, f, ensure_ascii=False)

        time.sleep(60)

@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    data = request.get_json()
    if 'message' in data:
        handle_message(data['message'])
    return 'ok'

def handle_message(msg):
    text = msg.get('text', '')
    chat_id = str(msg['chat']['id'])

    if text == '/start':
        send_message(chat_id, "[ ü§ñ ] 9CharnBot \nüëã ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö! ‡∏û‡∏¥‡∏°‡∏û‡πå /help ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

    elif text == '/help':
        send_message(chat_id, (
            "[ ü§ñ ] 9CharnBot : ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á\n"
            "/add [‡∏ß‡∏±‡∏ô] [‡πÄ‡∏ß‡∏•‡∏≤] [‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°] - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô /add ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ 09:00 ‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°\n"
            "/list - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô\n"
            "/remove [‡∏•‡∏≥‡∏î‡∏±‡∏ö] - ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö\n"
            "/clear - ‡∏•‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n"
            "/status_list - ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏á‡∏≤‡∏ô"
        ))

    elif text.startswith('/add '):
        try:
            parts = text[5:].split(' ', 2)
            day_str, time_str, message = parts[0], parts[1], parts[2]

            now = datetime.datetime.now(ZoneInfo("Asia/Bangkok"))
            if day_str == "‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ":
                next_day = now + datetime.timedelta(days=1)
            elif day_str == "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ":
                next_day = now
            else:
                send_message(chat_id, "[ ü§ñ ] 9CharnBot : ‚ùå ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ'")
                return

            next_day_str = next_day.strftime('%Y-%m-%d')
            add_schedule(chat_id, f"{next_day_str} {time_str}", message)
            send_message(chat_id, f"[ ü§ñ ] 9CharnBot \n‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô: {next_day_str} {time_str} ‚Üí {message}")
        except:
            send_message(chat_id, "[ ü§ñ ] 9CharnBot : ‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á /add [‡∏ß‡∏±‡∏ô] [‡πÄ‡∏ß‡∏•‡∏≤] [‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°]")

    elif text == '/list':
        lst = load_schedule(chat_id)
        if not lst:
            send_message(chat_id, "[ ü§ñ ] 9CharnBot : ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á")
        else:
            msg = "[ ü§ñ ] 9CharnBot : ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô\n"
            for i, item in enumerate(lst):
                msg += f"{i+1}. {item['time']} ‚Üí {item['message']}\n"
            send_message(chat_id, msg)

    elif text == '/status_list':
        lst = load_schedule(chat_id)
        if not lst:
            send_message(chat_id, "[ ü§ñ ] 9CharnBot : ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á")
        else:
            msg = "[ ü§ñ ] 9CharnBot : ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô\n"
            for i, item in enumerate(lst):
                status = "‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß" if item.get('notified', False) else "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏à‡πâ‡∏á"
                msg += f"{i+1}. {item['time']} ‚Üí {item['message']} [{status}]\n"
            send_message(chat_id, msg)

    elif text.startswith('/remove '):
        try:
            idx = int(text.split()[1]) - 1
            lst = load_schedule(chat_id)
            if 0 <= idx < len(lst):
                removed = lst.pop(idx)
                save_schedule(chat_id, lst)
                send_message(chat_id, f"[ ü§ñ ] 9CharnBot \nüóëÔ∏è ‡∏•‡∏ö: {removed['time']} ‚Üí {removed['message']}")
            else:
                send_message(chat_id, "[ ü§ñ ] 9CharnBot : ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ô‡∏±‡πâ‡∏ô")
        except:
            send_message(chat_id, "[ ü§ñ ] 9CharnBot : ‚ùå ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö /remove [‡∏•‡∏≥‡∏î‡∏±‡∏ö]")

    elif text == '/clear':
        save_schedule(chat_id, [])
        send_message(chat_id, "[ ü§ñ ] 9CharnBot : üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

if __name__ == '__main__':
    Thread(target=check_and_notify, daemon=True).start()
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
